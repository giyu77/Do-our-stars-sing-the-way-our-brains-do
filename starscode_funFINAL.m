%% BSCI 3270 Final Project - Do Our Brains Sing the Way Stars Do?
% By Gina Yu

% This project integrates spinning triangle visuals with star-based music notes, 
% visualizing stars based on their distance, luminosity, and spectral class, 
% alongside the music generated by their corresponding notes.

%% Parameters for Spinning Triangle
n = pi / 7;       % Frequency multiplier
r = 5;            % Radius for the points
a = 0:2*pi/3:2*pi; % Angle range for the points

%% Data Loading
% Load star dataset
data = readtable('star_dataset.csv');

% Load circadian rhythm data (if needed)
% data2 = readtable('data141110.csv');

%% Constants and Setup for Notes
Fs = 8000; % Sampling frequency
t = 0:1/Fs:1; % Time vector for notes
Freqs = [440, 494, 523, 587, 659, 698, 784]; % Frequencies for A-G
Notes = {'A', 'B', 'C', 'D', 'E', 'F', 'G'};
note_signals = containers.Map(Notes, arrayfun(@(f) sin(2 * pi * f * t), Freqs, 'UniformOutput', false));

%% Map spectral classes to musical notes
spectral_classes = unique(data.SpectralClass);
notes = {'A', 'B', 'C', 'D', 'E', 'F', 'G'};
spectral_to_notes = containers.Map();
for i = 1:length(spectral_classes)
    note = notes{mod(i-1, length(notes)) + 1};
    spectral_to_notes(spectral_classes{i}) = note;
end

%% Function: Play Notes and Visualize Stars with Spinning Triangle
function a_func(data, spectral_to_notes, note_signals, Fs, n, r, a)
    % Ensure color map is generated
    spectral_classes = unique(data.SpectralClass);
    colors = lines(length(spectral_classes)); % Assign a unique color to each spectral class
    
    % Function to Play Notes and Show Visuals
    play_notes_with_visuals(data, spectral_to_notes, note_signals, Fs, n, r, a, colors);
end

function play_notes_with_visuals(data, spectral_to_notes, note_signals, Fs, n, r, a, colors)
    % Sort data by distance
    sorted_data = sortrows(data, 'Distance_ly_');

    % Normalize distances to control volume
    distances = sorted_data.Distance_ly_;
    normalized_volumes = normalize(distances, 'range', [0.1, 1]);

    % Normalize luminosity for transparency
    luminosity = sorted_data.Luminosity_L_Lo_;
    normalized_luminosity = normalize(luminosity, 'range', [0.2, 1]);

    % Normalize radius for marker size
    radius = sorted_data.Radius_R_Ro_;
    normalized_radius = normalize(radius, 'range', [5, 500]);

    % Create a spinning triangle visual
    figure;
    hold on;
    axis equal;
    grid on;
    xlabel('X-axis', 'Color', 'w');
    ylabel('Y-axis', 'Color', 'w');
    title('Star Visualization and Spinning Triangle', 'Color', 'w');
    set(gca, 'Color', 'k', 'XColor', 'w', 'YColor', 'w');

    % Iterate through sorted stars and play notes
    for i = 1:height(sorted_data)
        % Determine color for the star
        class = sorted_data.SpectralClass{i};
        if isKey(spectral_to_notes, class)
            note = spectral_to_notes(class);
            signal = note_signals(note) * normalized_volumes(i);

            % Star properties
            x = r * cos(a + n * i);
            y = r * sin(a + n * i);
            color = colors(mod(i-1, size(colors, 1)) + 1, :);
            alpha_val = normalized_luminosity(i);
            size_marker = normalized_radius(i);

            % Draw spinning triangle markers
theta = linspace(0, 2*pi, 4); % Triangle vertices (3 + close loop)
star_x = x + (size_marker / 100) * cos(theta + n * i); % Element-wise addition
star_y = y + (size_marker / 100) * sin(theta + n * i); % Element-wise addition
fill(star_x, star_y, color, 'EdgeColor', 'none', 'FaceAlpha', alpha_val);

            % Update the plot
            drawnow;

            % Play the sound
            sound(signal, Fs);

            % Tempo variation
            pause(rand * 0.5 + 0.5);
        end
    end
    hold off;
end

% Function Execution
disp('Playing stars with spinning triangle visuals...');
a_func(data, spectral_to_notes, note_signals, Fs, pi/7, 5, 0:2*pi/3:2*pi);
